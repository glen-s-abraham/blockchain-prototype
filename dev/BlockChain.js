
const sha256=require('sha256');


class Blockchain{
	constructor(){
		this.blockchain=[];
		this.newTransactions=[];
	}

	//create and add the transations to the chain
	createNewBlock=(nonce,prevHash,hash)=>{
		const newBlock={
			index:this.blockchain.length+1,
			timestamp:Date.now(),
			transactions:this.newTransactions,
			nonce:nonce,
			hash:hash,
			prevBlock:prevHash
		};
		this.blockchain.push(newBlock);
		this.newTransactions=[];

		return newBlock;
	}

	//get the recently added block
	getLastBlock=()=>{
		return this.blockchain[this.blockchain.length-1];
	}

	//create a new transaction and add it to the transaction's list
	createNewTransaction=(amount,sender,reciever)=>{
		const newTransaction={
			amount:amount,
			sender:sender,
			reciever:reciever
		};
		this.newTransactions.push(newTransaction);
		return newTransaction;
	}
	
	//performs the hashing of block
	hashBlock=(prevHash,currentData,nonce)=>{
			const data=prevHash+nonce.toString()+JSON.stringify(currentData);
			const hash=sha256(data);
			return hash;
	}

	//repeatedly hashes a block until it finds trhe coreect hash:'0000xxxxxxxxxxx'
	//use current data and prevBlock hash 
	//new hash value generated by changing the nonce 
	//returns the correct nonce value the created the hash
	proofOfWork=()=>{

	}

}

module.exports=Blockchain;